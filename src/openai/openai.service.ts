import {Injectable, Logger} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import {HttpService} from "@nestjs/axios";
import OpenAI from 'openai';
import {baseKnowledge} from "./model";
export enum DialogRole {
    User = 'user',
    Assistant = 'assistant',
}
@Injectable()
export class OpenaiService {

    public dialogues: { [dialogId: string]: { role: DialogRole; content: string }[] } = {};
    private readonly logger = new Logger(OpenaiService.name);
    private openai: OpenAI;


    constructor(private httpService: HttpService,
                private configService: ConfigService) {
        const openaiApiKey = this.configService.get<string>('OPENAI_API_KEY');

        if (!openaiApiKey) {
            this.logger.error('API key for OpenAI is not provided.');
            throw new Error('API key for OpenAI is not provided.');
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è OpenAI —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º
        this.openai = new OpenAI({
            apiKey: openaiApiKey, // This is the default and can be omitted
        });
    }




    async generateText(dialogues: any[]): Promise<{ promptTokens: number; replyText: string }> {
        try {
            const response = await this.openai.chat.completions.create({
                model: "gpt-3.5-turbo-0125",
                messages: dialogues,
            });

            this.logger.log('Response from OpenAI:', response);

            if (response && response.choices) {
                const replyText = response.choices[0].message.content.trim();
                return { promptTokens: response.usage.prompt_tokens, replyText };
            } else {
                throw new Error('No choices found in response.');
            }
        } catch (error) {
            this.logger.error(`Error generating text: ${error}`);
            throw error;
        }
    }

    // –í OpenAiService
    async updateDialogue(dialogId: string, message: string, role: DialogRole): Promise<any> {

        if (!this.dialogues[dialogId]) {
            this.dialogues[dialogId] = [];
            const knowLage = baseKnowledge;
            const prompt = '–¢–∏ ‚Äî —á–∞—Ç-–±–æ—Ç —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –¥–æ–ø–æ–º–æ–≥—É –∑–≥—ñ–¥–Ω–æ –∑ –±–∞–∑–æ—é –∑–Ω–∞–Ω—å "–í–Ü–î–ü–û–í–Ü–î–Ü –ù–ê –ß–ê–°–¢–Ü –ó–ê–ü–ò–¢–ê–ù–ù–Ø",' +
                ' —â–æ –≤–∫–ª—é—á–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É –±–∞–Ω–∫—É –ø—ñ–¥ —á–∞—Å –∫–∞—Ä–∞–Ω—Ç–∏–Ω—É, —É–º–æ–≤–∏ –ø–µ—Ä–µ–≤–∏–ø—É—Å–∫—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –∫–∞—Ä—Ç–æ–∫,' +
                ' –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å, –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤—ñ—Å–∏ —Ç–∞ —ñ–Ω—à—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –ø–æ—Å–ª—É–≥–∏. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –Ω–∞–¥–∞–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å –∞–±–æ –≤–∏–º–∞–≥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏, ' +
                '—Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ö–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä—É –∑–∞ –Ω–æ–º–µ—Ä–∞–º–∏ 0 800 503 580 –∞–±–æ +38 044 393 25 90. ' +
                '–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏—á–µ—Ä–ø–Ω–∏–º–∏ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º–∏, –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —î–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏—Ä–∞–∑–Ω–æ—Å—Ç—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. ' +
                '–í–∞–∂–ª–∏–≤–æ –∑–∞–≤–∂–¥–∏ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ "–í–∏", –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–æ–Ω –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é,' +
                ' –ø–µ—Ä–µ—Ö–æ–¥—è—á–∏ –Ω–∞ —ñ–Ω—à—É –º–æ–≤—É –ª–∏—à–µ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–ª—ñ—î–Ω—Ç–∞. –ó–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏, —Ç–∞–∫—ñ —è–∫ –±–µ–∑–ø–µ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π,' +
                ' –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏ KYC (Know Your Customer).'+
                '–ü–∞–º\'—è—Ç–∞–π, —Ç–∏ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω:'+
                '- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ –Ω–µ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø–æ—Å–ª—É–≥ –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£.'+
                '- –ù–∞–¥–∞–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –∞–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è.'+
                '- –†–æ–∑–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∞–±–æ –¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –±–∞–Ω–∫—É.'+
                '—Ñ–æ—Ä–º–∞—Ç—É–π —Å–≤–æ—ó –≤—ã–¥–ø–æ–≤—ñ–¥—ñ —Å —Å—Ç–∏–ª—ñ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —î–º–æ–¥–∑—ñ'+
                '–û—Å—å –ø—Ä–∏–∫–ª–∞–¥, —è–∫ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏: "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! üòä –í–∞—à –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ –º–æ–±—ñ–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É TAS2U –∞–±–æ –Ω–∞ —Å–∞–π—Ç—ñ –±–∞–Ω–∫—É." \n' +
                '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏—Ä–∞–∑–Ω–æ—Å—Ç—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...\n'
            this.dialogues[dialogId].push({ role:DialogRole.Assistant, content: `${prompt}+${knowLage}` });
            console.log('knowLage work',this.dialogues[dialogId])

        }
        this.dialogues[dialogId].push({ role, content: message });

        return this.dialogues[dialogId];
    }


/*
    async fetchOpenAIResponse(message: string): Promise<string> {
        const openaiApiKey = this.configService.get<string>('OPENAI_API_KEY');
        const data = {
            prompt: message,
            model: "gpt-3.5-turbo-0125",
            temperature: 0.7,
            max_tokens: 150,
            top_p: 1.0,
            frequency_penalty: 0.0,
            presence_penalty: 0.0,
        };

        try {
            const response = await this.httpService.post('https://api.openai.com/v1/chat/completions', data, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${openaiApiKey}`,
                },
            }).toPromise();

            if (response.data.choices && response.data.choices.length > 0) {
                return response.data.choices[0].text.trim();
            } else {
                throw new Error('No choices found in response.');
            }
        } catch (error) {
            console.error('Error fetching response from OpenAI:', error);
            throw new Error('Error fetching response from OpenAI.');
        }
    }
*/
}
